{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","isOrderChanged","reorderedGoods","goods","visibleGoods","sort","prev","cur","ALPABET","localeCompare","LENGTH","length","console","log","reverse","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KA0CE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,GAAgC,IAAfF,GAClBF,IAAaL,EAASI,KAErBM,EArCD,SACLC,EADK,GAGJ,IADCN,EACF,EADEA,SAAUE,EACZ,EADYA,WAGNK,EAAY,YAAOD,GAoBzB,OAjBAC,EAAaC,MAAK,SAACC,EAAMC,GACvB,OAAQV,GACN,KAAKL,EAASgB,QACZ,OAAOF,EAAKG,cAAcF,GAE5B,KAAKf,EAASkB,OACZ,OAAOJ,EAAKK,OAASJ,EAAII,OAE3B,KAAKnB,EAASI,KACd,QACE,OAAO,MAKbgB,QAAQC,IAAIhB,EAAUE,GAEfA,EACHK,EAAaU,UACbV,EAUmBW,CACrBtB,EACA,CAAEM,aAAYF,aAGhB,OACE,sBAAKmB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYrB,IAAaL,EAASgB,UAEtCW,QAAS,kBAAMrB,EAAYN,EAASgB,UAPtC,iCAYA,wBACES,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYrB,IAAaL,EAASkB,SAEtCS,QAAS,kBAAMrB,EAAYN,EAASkB,SAPtC,4BAYA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAA2B,IAAfnB,IAEhBoB,QAAS,kBAAMnB,GAAeD,IAPhC,qBAYCE,GAEG,wBACEgB,KAAK,SACLD,UAAWE,IACT,SACA,aAEFC,QAAS,WACPrB,EAAYN,EAASI,MACrBI,GAAc,IARlB,sBAeN,6BACGE,EAAekB,KAAI,SAAAC,GAAI,OACtB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YChIjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.17de2482.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  visibleGoods.sort((prev, cur) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return prev.localeCompare(cur);\n\n      case SortType.LENGTH:\n        return prev.length - cur.length;\n\n      case SortType.NONE:\n      default:\n        return 0;\n    }\n  });\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return isReversed\n    ? visibleGoods.reverse()\n    : visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const isOrderChanged = isReversed === true\n    || sortType !== SortType.NONE;\n\n  const reorderedGoods = getReorderedGoods(\n    goodsFromServer,\n    { isReversed, sortType },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPABET },\n          )}\n          onClick={() => setSortType(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': isReversed !== true },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {isOrderChanged\n          && (\n            <button\n              type=\"button\"\n              className={classNames(\n                'button',\n                'is-danger',\n              )}\n              onClick={() => {\n                setSortType(SortType.NONE);\n                setIsReversed(false);\n              }}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n      <ul>\n        {reorderedGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}